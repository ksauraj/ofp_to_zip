name: Decrypt OFP

on:
  workflow_dispatch:
    inputs:
      ofp_link:
        description: "OFP Firmaware Link"
        required: true
      filename:
        description: "The filename You want in output (make unique)"
        required: true
      devicetype:
        description: "Specify Your Device type. { For Qualcomm (QC) FOR MEDIATEK (MTK) }"
        required: false
        default: "MTK"
      simage:
        description: "Do you want to merege super images, if yes then type YES otherwise NO"
        required: false
        default: "YES"
      region:
        description: "Specify a region for merging super iamges. Like <IN> for India."
        required: false
        default: "IN"
      bigfile:
        description: "Set to YES if your ofp file is more than 8GB. Setting to yes will take more time."
        required: false
        default: "NO"

env:
  OFP_LINK: ${{ github.event.inputs.ofp_link }}
  FILENAME: ${{ github.event.inputs.filename }}
  DTYPE: ${{ github.event.inputs.devicetype }}
  SIMG: ${{ github.event.inputs.simage }}
  BFILE: ${{ github.event.inputs.bigfile }}
  REGION: ${{ github.event.inputs.region }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Setting up the working environment
        uses: actions/checkout@main

      - name: Cleaning up the working environment
        if: ${{ github.event.inputs.bigfile == 'YES' }}
        uses: rokibhasansagar/slimhub_actions@main

      - name: Downloading the OFP firmware
        shell: bash
        run: |
          sudo apt-fast update -qqy
          sudo apt-fast install -qqy coreutils p7zip-full p7zip-rar python3 python3-pip rclone simg2img
          aria2c -c -s16 -x16 "$OFP_LINK" 2>/dev/null || {
            echo "Error: The provided URL is invalid." && exit 1
          }
          file_extension=${OFP_LINK##*.}
          if [ "$file_extension" != "ofp" ]; then
            7z e *."${file_extension}" -y && rm *."${file_extension}"
            if [ ! -f *.ofp ]; then
              mv $(find . -name "*.ofp") .
            fi
          fi
          find . -type f ! -name "*.ofp" -delete
          OFPFILE=$(basename *.ofp)
          OFPNAME=${OFPFILE#.ofp}
          echo "OFP_FILE=${OFPFILE}" >> ${GITHUB_ENV}
          echo "OFP_NAME=${OFPNAME}" >> ${GITHUB_ENV}

      - name: Decrypting the OFP firmware
        shell: bash
        run: |
          sudo apt-fast update -qqy
          sudo apt-fast -y install python3-testresources
          sudo apt-fast install -qqy openssl rsync sshpass rclone jq
          sudo pip3 install --upgrade pip wheel setuptools
          sudo pip install pycryptodome
          sudo apt install simg2img
          git clone https://github.com/bkerler/oppo_decrypt.git --depth=1
          cd oppo_decrypt
          pip3 install -r requirements.txt
          cd ..
          dtype=$DTYPE
          if [ $dtype == QC ]
          then
              echo "Trying to Decrypt QC OFP...\n"
              python3 ./oppo_decrypt/ofp_mtk_decrypt.py "$OFP_FILE" out 2>/dev/null
          elif [ $dtype == MTK ]
          then
              echo "Trying to Decrypt MTK OFP...\n"
              python3 ./oppo_decrypt/ofp_mtk_decrypt.py "$OFP_FILE" out 2>/dev/null
          else
              echo "Error: Invalid device type provided."
              exit 1
          fi
      - name: Combine super images
        shell: bash
        run: |
          simg=$SIMG
          if [ $simg == YES ]
          then
              mkdir -p super
              cd out
              curl -s https://gist.githubusercontent.com/ksauraj/50bea76ade411df498e108b045674f1d/raw/merge.sh -o merge.sh
              bash merge.sh $REGION
              mv *super*img ../super
              mv ../super/super.img .
              cd ..
          elif [ $simg == NO ]
          then
              echo "Not merging images"
          fi
      - name: Compress Decrypted Zip
        shell: bash
        run: |
          cd out && zip -r9 Decrypted_"${FILENAME}".zip * && cd ..
          simg=$SIMG
          if [ $simg == YES ]
          then
              cd super
              zip -r superimages.zip *
              cd ..            
          elif [ $simg == NO ]
          then
              echo "Not zipping superimages"
          fi
    
      - name: Upload Decrypted Zip
        shell: bash
        run: |
          d_file=$(find -iname 'Decrypted_*.zip')
          s_file=$(find -iname 'superimages.zip')
          curl -s https://raw.githubusercontent.com/ksauraj/global_index_source/master/setup | bash
          ksau setup
          file_link=$(ksau -q upload "${d_file}" Decrypted_ofp/"${FILENAME}"_decrypt)
          echo "FILE_LINK=${file_link}" >> ${GITHUB_ENV}
          simg=$SIMG
          if [ $simg == YES ]
          then
              super_link=$(ksau -q upload "${s_file}" Decrypted_ofp/"${FILENAME}"_decrypt)              
              echo "SUPER_LINK=${super_link}" >> ${GITHUB_ENV}
          elif [ $simg == NO ]
          then
              echo "Not Uploading superimages"
          fi 

      - name: Download link for the prepared ZIP file
        run: |
          # The download link should be present below ;)
          echo "Donwload Links"
          echo "--------------"
          echo "Decrypted file zip link : $FILE_LINK"
          if [ $simg == YES ]
          then
              echo "Super images zip link : $SUPER_LINK"
              echo ""
          elif [ $simg == NO ]
          then
              echo ""
          fi 
          echo "Edited By Sauraj & Pratham ;)"
